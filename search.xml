<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode-动态规划-1</title>
    <url>/2020/11/24/DP_test/</url>
    <content><![CDATA[<h1 id="动态规划">动态规划</h1>
<p><a href="https://leetcode-cn.com/leetbook/read/dynamic-programming-1-plus/5rqhkt/" target="_blank" rel="noopener">动态规划精讲1-题目列表</a></p>
<h2 id="问题的特点">问题的特点</h2>
<ul>
<li>最优子结构：原问题的最优解可以通过子问题的最优解推出。一般使用状态转移方程描述子问题之间、子问题和原问题之间的转化关系。</li>
<li>重复子问题：求解不同子问题时需要进行大量相同的运算。动态规划中可采用记忆化递归或递推的方法减少重复问题的计算。如果子问题之间无重复，使用动态规划不能减少重复计算，效率和普通递归相同。</li>
</ul>
<a id="more"></a>
<h2 id="和其他算法的区别">和其他算法的区别</h2>
<h3 id="分治">分治</h3>
<p>基本思想是减小子问题规模，分别求解子问题，然后综合子问题的解得出最终结果。分治法能够高效解决有最优子结构，但是没有重复子问题的问题。</p>
<h3 id="贪心">贪心</h3>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: left;">动态规划</th>
<th style="text-align: left;">贪心</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">最优子结构</td>
<td style="text-align: left;">原问题最优解中一定包含某个子问题最优解，但不一定包含上一步子问题的最优解，因此需要记录之前所有子问题的最优解</td>
<td style="text-align: left;">每一步的最优解都一定包含上一步子问题的最优解，因此无需记录上一步之前的最优解</td>
</tr>
<tr class="even">
<td style="text-align: left;">重复子问题</td>
<td style="text-align: left;">大量重复子问题</td>
<td style="text-align: left;">只要处理每步贪心策略选择出的一个子问题</td>
</tr>
<tr class="odd">
<td style="text-align: left;">结果正确性</td>
<td style="text-align: left;">动态规划的本质是穷举法（需要考虑所有子问题，但可以避免重复的计算），因此结果一定正确</td>
<td style="text-align: left;">求得的是贪心意义上的最优解，不能保证正确</td>
</tr>
<tr class="even">
<td style="text-align: left;">算法复杂度</td>
<td style="text-align: left;">复杂度高</td>
<td style="text-align: left;">复杂度低</td>
</tr>
</tbody>
</table>
<h2 id="解题思路">解题思路</h2>
<h2 id="线性动态规划">线性动态规划</h2>
<p>线性动态规划的主要特点是状态的推导是按照问题规模从小到大依次递推的，较大规模的问题的解依赖较小规模的问题的解。 线性动态规划解决的问题主要是单串，双串，矩阵上的问题，因为问题规模可以用位置表示，并且位置的大小就是问题规模的大小。因此从前往后推位置就相当于从小到大推问题规模。</p>
<p>最长上升子序列 / 最长递增子序列(LIS): Longest Increasing Subsequence 最长连续序列(LCS): Longest Consecutive Sequence 最长连续递增序列(LCIS): Longest Continuous Increasing Subsequence 最长公共子序列(LCS): Longest Common Subsequence</p>
<p>子串：一定连续 子序列：可以不连续</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态定义</span></span><br><span class="line">dp[n] = [<span class="number">0</span>, n]区间上问题的解</span><br><span class="line"><span class="comment">// 状态转移方程，由规模更小的状态转移而来</span></span><br><span class="line">dp[n] = f(dp[n - <span class="number">1</span>], dp[n - <span class="number">2</span>], ..., dp[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h2 id="线性dp-lis">线性DP-LIS</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">题目</th>
<th style="text-align: left;">难度</th>
<th style="text-align: left;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">300. 最长上升子序列</a></td>
<td style="text-align: left;">中等</td>
<td style="text-align: left;">单串-LIS</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/" target="_blank" rel="noopener">673. 最长递增子序列的个数</a></td>
<td style="text-align: left;">中等</td>
<td style="text-align: left;">单串-LIS扩展</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/" target="_blank" rel="noopener">354. 俄罗斯套娃信封问题</a></td>
<td style="text-align: left;">困难</td>
<td style="text-align: left;">单串-LIS｜排序<br/>字节</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>
<h3 id="最长上升子序列">最长上升子序列</h3>
<!-- <div align="center"><img src="img/DP/300.png" style="zoom:50%;" /></div> -->
<p><img src="img/DP/300.png" style="zoom:50%;" /></p>
<p>状态定义： <span class="math inline">\(dp[i]\)</span>表示以<span class="math inline">\(nums[i]\)</span>结尾的最长上升子序列的长度。</p>
<p>状态转移： <span class="math display">\[dp[i] = \left \{
\begin{aligned}
s.t. \quad j \in [0, i - 1],\; nums[j] &lt; nums[i] \\
max(dp[i],\; dp[j] + 1) \\
\end{aligned} \right.\]</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO 分治</span></span><br><span class="line">    <span class="comment">// 方法 1</span></span><br><span class="line">    <span class="comment">// T = O(N^2), S = O(N)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i])&#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max_len = Math.max(max_len, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长递增子序列的个数">最长递增子序列的个数</h3>
<p><img src="img/DP/673.png" style="zoom:50%;"/></p>
<p>状态定义： <span class="math inline">\(dp[i]\)</span>表示以<span class="math inline">\(nums[i]\)</span>结尾的最长递增子序列的长度； <span class="math inline">\(count[i]\)</span>表示以<span class="math inline">\(nums[i]\)</span>结尾的最长递增子序列（长度相同）的组合个数。</p>
<p>转移方程： <span class="math display">\[dp[i] = \left \{ \begin{aligned}
s.t. \quad j \in [0, i - 1],\; nums[i] &gt; nums[j] \\
max(dp[i],\; dp[j] + 1) \\
\end{aligned} \right.\]</span> <span class="math display">\[count[i] = \left \{ \begin{aligned}
s.t. \quad j \in [0, i - 1],\; nums[i] &gt; nums[j] \\
count[j] \quad dp[i] &lt; dp[j] + 1 \\
sum(count[i],\; count[j]) \quad dp[i] = dp[j] + 1 \\
\end{aligned} \right.\]</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findNumberOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        Arrays.fill(count, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 最长上升子串只需一层循环</span></span><br><span class="line">        <span class="comment">// 最长上升子序列则需要二重循环嵌套</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i])&#123;</span><br><span class="line">                    <span class="comment">// 第一次找到以nums[i]结尾的LIS</span></span><br><span class="line">                    <span class="keyword">if</span>(dp[j] + <span class="number">1</span> &gt; dp[i])&#123;</span><br><span class="line">                        dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                        count[i] = count[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(dp[j] + <span class="number">1</span> == dp[i])&#123;</span><br><span class="line">                        <span class="comment">// 以nums[i]结尾的LIS已被找到过</span></span><br><span class="line">                        count[i] += count[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 记录最长子序列的长度</span></span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] == max)&#123;</span><br><span class="line">                res += count[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="俄罗斯套娃信封问题">俄罗斯套娃信封问题</h3>
<p><img src="img/DP/354.png" style="zoom:50%;"></p>
<p>排序 + LIS，状态定义和转移方程同第300题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxEnvelopes</span><span class="params">(<span class="keyword">int</span>[][] envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// T = O(N^2 + NlogN) = O(N^2), S = O(N)</span></span><br><span class="line">        <span class="keyword">if</span>(envelopes == <span class="keyword">null</span> || envelopes.length == <span class="number">0</span> || envelopes[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = envelopes.length;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(envelopes, (o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 先按照宽度升序排序</span></span><br><span class="line">            <span class="keyword">if</span>(o1[<span class="number">0</span>] != o2[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果宽度相同则按高度降序排序</span></span><br><span class="line">                <span class="keyword">return</span> o2[<span class="number">1</span>] - o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(envelopes[i][<span class="number">1</span>] &gt; envelopes[j][<span class="number">1</span>])&#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线性dp-最大子数组和">线性DP-最大子数组和</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">题目</th>
<th style="text-align: left;">难度</th>
<th style="text-align: left;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子序和</a></td>
<td style="text-align: left;">简单</td>
<td style="text-align: left;">最大子数组和</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">152. 乘积最大子数组</a></td>
<td style="text-align: left;">中等</td>
<td style="text-align: left;">最大子数组和</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/maximum-sum-circular-subarray/" target="_blank" rel="noopener">918. 环形子数组的最大和</a></td>
<td style="text-align: left;">中等</td>
<td style="text-align: left;">最大子数组和</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/max-submatrix-lcci/" target="_blank" rel="noopener">面试题 17.24. 最大子矩阵</a></td>
<td style="text-align: left;">困难</td>
<td style="text-align: left;">最大子数组和-二维</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/" target="_blank" rel="noopener">363. 矩形区域不超过 K 的最大数值和</a></td>
<td style="text-align: left;">困难</td>
<td style="text-align: left;">最大子数组和</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>
<h3 id="最大子序和">最大子序和</h3>
<p><img src="img/DP/53.png" style="zoom:50%;"/></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方法1 贪心</span></span><br><span class="line">    <span class="comment">// T = O(n), S = O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray_1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE, tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            tmp += num;</span><br><span class="line">            res = Math.max(res, tmp);</span><br><span class="line">            tmp = tmp &lt; <span class="number">0</span> ? <span class="number">0</span> : tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法 2 DP</span></span><br><span class="line">    <span class="comment">// T = O(N), S = O(N) -&gt; O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray_1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// exception input</span></span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, res = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            pre = Math.max(pre + num, num);</span><br><span class="line">            res = Math.max(res, pre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方法 3 线段树 + 分治</span></span><br><span class="line">    <span class="comment">// 可以方便地将所有运算以树的形式记忆化</span></span><br><span class="line">    <span class="comment">// 这样能够在O(logN)的时间复杂度下获取任意区间的最大子序和</span></span><br><span class="line">    <span class="comment">// T = O(logN), S = O(logN)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义数据结构存储子区间状态</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> lSum, rSum, mSum, iSum;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Status</span><span class="params">(<span class="keyword">int</span> lSum, <span class="keyword">int</span> rSum, <span class="keyword">int</span> mSum, <span class="keyword">int</span> iSum)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lSum = lSum;   <span class="comment">// 包含区间左端元素的最大子序和</span></span><br><span class="line">            <span class="keyword">this</span>.rSum = rSum;   <span class="comment">// 包含区间右端元素的最大子序和</span></span><br><span class="line">            <span class="keyword">this</span>.mSum = mSum;   <span class="comment">// 区间的最大子序和</span></span><br><span class="line">            <span class="keyword">this</span>.iSum = iSum;   <span class="comment">// 区间所有元素和</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求指定区间内的状态信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">getInfo</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Status(arr[l], arr[l], arr[l], arr[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        Status lSub = getInfo(arr, l, mid);</span><br><span class="line">        Status rSub = getInfo(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> pushUp(lSub, rSub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将两个子区间的状态信息合并为更大区间的状态信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">pushUp</span><span class="params">(Status l, Status r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lSum = Math.max(l.lSum, l.iSum + r.lSum);</span><br><span class="line">        <span class="keyword">int</span> rSum = Math.max(r.rSum, r.iSum + l.rSum);</span><br><span class="line">        <span class="keyword">int</span> mSum = Math.max(Math.max(l.mSum, r.mSum), l.rSum + r.lSum);</span><br><span class="line">        <span class="keyword">int</span> iSum = l.iSum + r.iSum;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Status(lSum, rSum, mSum, iSum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// exception input</span></span><br><span class="line">        <span class="keyword">return</span> getInfo(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>).mSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="乘积最大子数组">乘积最大子数组</h3>
<p><img src="img/DP/152.png" style="zoom:50%"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// solution 4 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res, max, min;</span><br><span class="line">        res = max = min = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = max;</span><br><span class="line">                max = min;</span><br><span class="line">                min = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max * nums[i], nums[i]);</span><br><span class="line">            min = Math.min(min * nums[i], nums[i]);</span><br><span class="line">            res = Math.max(res, max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="环形子数组的最大和">环形子数组的最大和</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// T = O(N), S = O(1)</span></span><br><span class="line">    <span class="comment">// 两次计算 1. 最大连续子数组和， 2. 最小连续子数组和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubarraySumCircular</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> A[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// maxSum 普通的最大连续子数组和</span></span><br><span class="line">        <span class="comment">// minSum 不包含数组首末元素的最小连续子数组和</span></span><br><span class="line">        <span class="keyword">int</span> sum = A[<span class="number">0</span>], total = A[<span class="number">0</span>], maxSum = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                sum += A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sum = A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            maxSum = Math.max(sum, maxSum);</span><br><span class="line">            total += A[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum = A[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> minSum = A[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; len - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                sum += A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sum = A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            minSum = Math.min(minSum, sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(maxSum, total - minSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大子矩阵">最大子矩阵</h3>
<p><img src="img/DP/17-24.png" style="zoom:50%"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// T = O(N^2), S = O(N)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getMaxMatrix(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="comment">// exception input</span></span><br><span class="line">        <span class="keyword">int</span> row = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 列方向压缩成一维数组</span></span><br><span class="line">        <span class="keyword">int</span>[] vector = <span class="keyword">new</span> <span class="keyword">int</span>[col];</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> maxSum = matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; k++) vector[k] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; row; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; k++) vector[k] += matrix[j][k];</span><br><span class="line">                <span class="comment">// 最大子串和(一维)</span></span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; col; c++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        sum += vector[c];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        sum = vector[c];</span><br><span class="line">                        start = c;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(sum &gt; maxSum)&#123;</span><br><span class="line">                        maxSum = sum;</span><br><span class="line">                        res[<span class="number">0</span>] = i;</span><br><span class="line">                        res[<span class="number">1</span>] = start;</span><br><span class="line">                        res[<span class="number">2</span>] = j;</span><br><span class="line">                        res[<span class="number">3</span>] = c;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线性dp-打家劫舍">线性DP-打家劫舍</h2>
<h2 id="前缀和">前缀和</h2>
<h2 id="区间动态规划">区间动态规划</h2>
<h2 id="背包问题">背包问题</h2>
<h2 id="状态压缩">状态压缩</h2>
<h2 id="计数问题">计数问题</h2>
<h2 id="矩阵快速幂">矩阵快速幂</h2>
<h2 id="数位动态规划">数位动态规划</h2>
<h1 id="try-2">try 2</h1>
<h2 id="wow">wow</h2>
<h1 id="try-3">try 3</h1>
<h2 id="wowow">wowow</h2>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
